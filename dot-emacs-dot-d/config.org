#+TITLE: Emacs Config
#+AUTHOR: Akash Agrawal
#+EMAIL: akagr@outlook.com
#+PROPERTY: header-args :results silent :tangle "./init.el"
#+STARTUP: content
#+babel: :cache yes

* Quick keybindings for memory

|------------+---------------------------------------------|
| Keybinding | Explanation                                 |
|------------+---------------------------------------------|
| C-c C-c    | Execute code block                          |
| C-c C-o    | Open source block result                    |
| C-c C-,    | Insert structure template (Eg: Code blocks) |
| C-c '      | Edit the current source code block          |
| srcel<TAB> | Insert elisp code block                     |
|------------+---------------------------------------------|

* Early Init
:properties:
:header-args+: :tangle "./early-init.el"
:end:

*** Defer Compilation
#+BEGIN_SRC emacs-lisp
  (defvar comp-deferred-compilation)
  (setq comp-deferred-compilation t)
#+END_SRC

*** Speed Boost
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil
        frame-inhibit-implied-resize t)
#+END_SRC

*** Reduce GC
Following [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][Doom-Emacs FAQ]], we max the garbage collection threshold on startup, and reset it to the original value after.
#+BEGIN_SRC emacs-lisp
  ;; max memory available for gc on startup
  (defvar aa/gc-cons-threshold 16777216)
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold aa/gc-cons-threshold
                    gc-cons-percentage 0.1)))

  ;; max memory available for gc when opening minibuffer
  (defun aa/defer-garbage-collection-h ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun aa/restore-garbage-collection-h ()
    ;; Defer it so that commands launched immediately after will enjoy the
    ;; benefits.
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold aa/gc-cons-threshold))))

  (add-hook 'minibuffer-setup-hook #'aa/defer-garbage-collection-h)
  (add-hook 'minibuffer-exit-hook #'aa/restore-garbage-collection-h)
  (setq garbage-collection-messages nil)
#+END_SRC

Temporarily avoid special handling of files
#+BEGIN_SRC emacs-lisp
  (defvar aa/-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist aa/-file-name-handler-alist)))
#+END_SRC

*** Disable Site Run
#+BEGIN_SRC emacs-lisp
  (setq site-run-file nil)
#+END_SRC

*** Don't compact font caches
#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+END_SRC

*** Improve I/O
Optimizations for improving I/O performance. Increase max bytes read from a sub-process in a single op (Emacs 27+)
#+BEGIN_SRC emacs-lisp
  (when (boundp 'read-process-output-max)
    ;; 1MB in bytes, default 4096 bytes
    (setq read-process-output-max 1048576))
#+END_SRC

*** Straight.el
[[https://github.com/raxod502/straight.el][straight.el]] is used to download packages for us from all over the web. It stores them all in their respective git folders in =.emacs.d/straight=, which makes debugging, and contributing fixes back upstream as easy as possible.

Updating some settings so straight.el can play nicely with use-package.
#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t
      straight-cache-autoloads t
      straight-vc-git-default-clone-depth 1
      vc-follow-symlinks t)
#+END_SRC

Enable debugging on error.
#+BEGIN_SRC emacs-lisp
  (setq debug-on-error t)
#+END_SRC

Fetching =straight.el=.
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq vc-follow-symlinks 'ask) ; restore default
#+END_SRC

Loading an optional package which gives us some convenience functions, like ~straight-x-clean-unused-repo~ to remove any packages we don't have configured anymore.
#+begin_src emacs-lisp
  (require 'straight-x)
#+end_src

Installing =use-package= now.
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

*** Use the garbage collector magic hack
#+begin_src emacs-lisp
  (use-package gcmh
    :demand t
    :config (gcmh-mode 1))
  #+end_src
*** End early init
#+BEGIN_SRC emacs-lisp
  (provide 'early-init)
#+END_SRC

* External Dependencies

- Download ~elixir-ls~ from https://github.com/JakeBecker/elixir-ls and adjust the path of language server in eglot config.

* Bootstrapping and Default

Turn off auto backup files, startup message and other more sensible defaults.
#+BEGIN_SRC emacs-lisp
  (setq
   auto-save-default nil
   create-lockfiles nil
   make-backup-files nil
   inhibit-startup-message t
   load-prefer-newer t
   ring-bell-function 'ignore
   sentence-end-double-space nil
   confirm-kill-processes nil)
#+END_SRC

Don't use tabs for indentation. Also truncate lines instead of wrapping them.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                truncate-lines t)
#+END_SRC

Use y or n instead of yes or no. Additionally, use ibuffers to be consistent with buffer management and not having to worry about wrong key chords.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defalias 'list-buffers 'ibuffer)
#+END_SRC

Turn off all the chrome that emacs puts by default.
#+BEGIN_SRC emacs-lisp
  (progn
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (tooltip-mode -1))
#+END_SRC

A few modes are turned on by default
#+BEGIN_SRC emacs-lisp
  (global-so-long-mode) ;; handles really long lines well
  (electric-pair-mode) ;; auto matching brackets, parentheses etc.
  (show-paren-mode) ;; show matching opening/closing parentheses
  (column-number-mode) ;; show column number in mode line
  (global-display-line-numbers-mode) ;; show line numbers in all buffers
#+END_SRC

Make the command key behave as 'meta' on macOS.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-option-key-is-meta nil
          mac-command-key-is-meta t
          mac-command-modifier 'meta
          mac-option-modifier 'super))
#+END_SRC

Delete whitespace on save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-change-major-mode-hook
            (lambda ()
              (modify-syntax-entry ?_ "w")))
#+END_SRC

* Support Packages

Loading emacs from finder or spotlight causes it to not load many environment variables. This package fixes it.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

Various packages that are used by numerous other packages.
+ `which-key` allows using keybindings interactively. For example, if `<leader>gs` is mapped to `magit-status`, and I press only `<leader>g`, it'll show all the keys and commands that are valid follows.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    :custom (which-key-idle-delay 0.3))
#+END_SRC

Simplify leader bindings with general.el.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer aa/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix ","
      :global-prefix "C-,"))
#+end_src
* Common Keybindings

#+BEGIN_SRC emacs-lisp
  (aa/leader-key-def
    "e"  '(:ignore t :which-key "emacs")
    "ee" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :which-key "open config")
    "er" '((lambda () (interactive) (load-file user-init-file)) :which-key "reload config")
    "ek" '(kill-emacs :which-key "kill emacs")

    "h"  '(help-command :which-key "help")

    "t"  '(:ignore t :which-key "toggle")
    "tt" '(counsel-load-theme :which-key "theme")
    "tw" '(toggle-truncate-lines :which-key "wrap lines")

    "c"  '(:ignore t :which-key "code")
    "cc" '(xref-find-definitions :which-key "find definitions")
    "cr" '(xref-find-references :which-key "find references"))
#+END_SRC

* Appearance

Set default frame height.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(width . 200))
  (add-to-list 'default-frame-alist '(height . 48))
#+END_SRC

Use ~Fira Code~ font with ligatures. Install the symbol font with ~M-x fira-code-mode-intall-fonts~. This is non-optional, and is required even after installing ~Fira Code~ to the system. Restart emacs after installing symbol fonts.
#+BEGIN_SRC emacs-lisp
  (use-package fira-code-mode
    :demand t
    :diminish
    :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
    :hook prog-mode
    :config
    (set-face-attribute 'default nil
                        :family "FiraCode Nerd Font"
                        :height 130
                        :weight 'normal))

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula t))
#+END_SRC

Load theme after creating a new frame. This is required to work with server/client model. Otherwise, emacs will load theme only once when starting server and all subsequent frames won't get the theme.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (load-theme 'doom-dracula t))))
#+END_SRC

Config for mode line:
#+begin_src emacs-lisp
  ;; Diminish minor modes from mode line
  (use-package diminish
    :config
    (diminish 'org-indent-mode)
    (diminish 'buffer-face-mode)
    (diminish 'visual-line-mode)
    (diminish 'eldoc-mode)
    (diminish 'auto-revert-mode))
#+end_src

* Evil Mode

Add undo package to allow branching undos.
#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src

Being a long time (neo)vim user, I use evil mode exclusively for editing. When they say it's impossible to get out of vim, it has a deeper meaning.

I use different colored cursors to depict what mode I'm in. Way easier to work with than looking at minibuffer.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-respect-visual-line-mode t
          evil-undo-system 'undo-fu
          evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-mode)
    (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes)
          evil-emacs-state-cursor '("indian red" box)
          evil-normal-state-cursor '("indian red" box)
          evil-visual-state-cursor '("royal blue" box)
          evil-insert-state-cursor '("yellow green" bar)
          evil-replace-state-cursor '("red" bar)
          evil-operator-state-cursor '("red" hollow)))
#+END_SRC

Commentary package allows me to retain my muscle memory of (un)commenting code.
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config
    (evil-commentary-mode))
#+END_SRC

Evil surround for adding quotes, parenthesis etc. Another takeaway from vim.
#+begin_src emacs-lisp

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

~evil-collection~ adds evil bindings for packages and modes not covered by ~evil~.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :init
    (evil-collection-init '(deadgrep dired dired-sidebar ediff ibuffer magit vterm xref)))
#+END_SRC

* Org Mode

Set up org default files and directories:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-directory "~/Dropbox/org"
          org-default-notes-file (concat org-directory "/notes.org")
          org-agenda-files '("~/Dropbox/org/")
          org-archive-location (concat org-directory "/archive/%s::")))
#+end_src

Define some evil keybindings for org mode.
#+begin_src emacs-lisp
  (aa/leader-key-def
    "r"  '(:ignore t :which-key "org mode")
    "ra" '(org-agenda :which-key "agenda")
    "rc" '(org-capture :which-key "capture")
    "ri" '((lambda () (interactive) (org-indent-block)) :which-key "indent block")
    "rl" '(org-store-link :which-key "store Link")
    "ro" '((lambda () (interactive) (find-file org-default-notes-file)) :which-key "open notes")
    "rp" '(org-present :which-key "present")
    "rt" '(org-babel-tangle :which-key "tangle"))
#+end_src

- Use org indent mode. This allows visual soft indentation of files without me having to maintain that.
- Turn on visual line mode to wrap lines.
- Turn on variable pitch mode to use different scale for headings
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-startup-indented t
          org-hide-emphasis-markers t
          org-fontify-done-headline t
          org-hide-leading-stars t
          org-pretty-entities t
          org-src-tab-acts-natively t
          org-odd-levels-only t
          truncate-lines nil)
    (add-hook 'org-mode-hook #'visual-line-mode)
    (add-hook 'org-mode-hook #'variable-pitch-mode)
    (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images))
#+END_SRC

Org bullets package prettifies the headline markers:
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :custom
    (org-bullets-bullet-list '("◉" "☯" "○" "☯" "✸" "☯" "✿" "☯" "✜" "☯" "◆" "☯" "▶"))
    (org-ellipsis " ▶")
    :hook (org-mode . org-bullets-mode))

  (use-package evil-org
    :diminish
    :commands evil-org-mode
    :init
    (add-hook 'org-mode-hook #'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

Configure font. The variable-pitch is used for fonts which are scaled. Eg: Headlines and content. Fixed pitch is for things with fixed size, like code, tables etc.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (progn
                  (let* ((variable-tuple
                          (cond ((x-list-fonts "FiraCode Nerd Font") '(:font "FiraCode Nerd Font"))
                                (nil (warn "Cannot find Firacode. Install FiraCode Nerd Font."))))
                         (base-font-color   (face-foreground 'default nil 'default))
                         (headline         `(:inherit default :weight bold :foreground ,base-font-color)))

                    (custom-theme-set-faces
                     'user
                     `(org-level-8 ((t (,@headline ,@variable-tuple))))
                     `(org-level-7 ((t (,@headline ,@variable-tuple))))
                     `(org-level-6 ((t (,@headline ,@variable-tuple))))
                     `(org-level-5 ((t (,@headline ,@variable-tuple))))
                     `(org-level-4 ((t (,@headline ,@variable-tuple))))
                     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.1))))
                     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
                     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
                     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.75 :underline nil)))))))

                (custom-theme-set-faces
                 'user
                 '(variable-pitch ((t (:family "FiraCode Nerd Font" :height 140 :weight normal))))
                 '(fixed-pitch ((t ( :family "FiraCode Nerd Font" :height 130))))))))
#+END_SRC

Defined which elements of the org files are fixed pitch, so they're not scaled:
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (custom-theme-set-faces
                 'user
                 '(org-block ((t (:inherit fixed-pitch))))
                 '(org-code ((t (:inherit (shadow fixed-pitch)))))
                 '(org-document-info ((t (:foreground "dark orange"))))
                 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
                 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
                 '(org-link ((t (:foreground "royal blue" :underline t))))
                 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
                 '(org-property-value ((t (:inherit fixed-pitch))) t)
                 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
                 '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
                 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 1))))
                 '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))))))
#+END_SRC

Replace default block delimiters with ligatures
#+BEGIN_SRC emacs-lisp
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                         ("#+END_SRC" . "†")
                                         ("#+begin_src" . "†")
                                         ("#+end_src" . "†")))
  (setq prettify-symbols-unprettify-at-point t)
  (add-hook 'org-mode-hook 'prettify-symbols-mode)
#+END_SRC

Replace list bullets with prettier dots.
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([+]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
#+END_SRC

Add ability to present org files
#+BEGIN_SRC emacs-lisp
  (use-package org-present
    :config
    (add-hook 'org-present-mode-hook
                 (lambda ()
                   (display-line-numbers-mode -1)
                   (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (display-line-numbers-mode +1)
                   (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write))))
#+END_SRC
* Better UX for Menus - Ivy and Bros.

Ivy allows me to use fuzzy find files, M-x commands, subdirectories, buffers. It provides the backend which many packages end up using. Alternatives would be helm and ido, which I've not yet tried.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (:map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)
                ("C-l" . ivy-alt-done)
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line)
                :map ivy-switch-buffer-map
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line)
                ("C-l" . ivy-done)
                ("C-d" . ivy-switch-buffer-kill)
                :map ivy-reverse-i-search-map
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line)
                ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers nil
          ivy-initial-inputs-alist nil
          ivy-count-format "(%d/%d) ")
    ;; Don't want to see these buffers in switcher. Rarely,
    ;; if ever have I switched to them.
    (add-to-list 'ivy-ignore-buffers "^magit")
    (add-to-list 'ivy-ignore-buffers "^:") ;; This removes the dired-sidebar buffer from list
    (add-to-list 'ivy-ignore-buffers "\\*Messages\\*")
    (add-to-list 'ivy-ignore-buffers "\\*vterm\\*")
    (add-to-list 'ivy-ignore-buffers "\\*EGLOT")
    (add-to-list 'ivy-ignore-buffers "\\*eldoc*")
    (add-to-list 'ivy-ignore-buffers "\\*Warnings*")
    (add-to-list 'ivy-ignore-buffers "\\*Compile-Log\\*"))
#+END_SRC

[[https://github.com/Yevgnen/ivy-rich][Ivy Rich]] adds some flair to Ivy minibuffer by providing additional details about candidates - major mode, project etc.

#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after ivy
    :diminish
    :custom
    (ivy-virtual-abbreviate 'full)
    (ivy-rich-switch-buffer-align-virtual-buffer nil)
    (ivy-rich-path-style 'full)
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (ivy-rich-mode))
#+END_SRC

[[https://github.com/abo-abo/hydra][Hydra]] allows creating groups of keybindings. I don't use it directly, but packages like Ivy expose additional functionality with it.

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
  (use-package ivy-hydra
    :after (ivy hydra))

#+END_SRC

[[https://github.com/abo-abo/swiper/blob/master/counsel.el][Counsel]] applies Ivy to a lot of areas in emacs - M-x menu, buffer menu etc.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config
    (counsel-mode t)
    :bind (("M-x" . counsel-M-x)))

  (use-package wgrep)
#+END_SRC

[[https://github.com/raxod502/prescient.el][Prescient.el]] is a package that adds sane sorting and filtering behaviour, and it comes with adapters for popular completion frameworks (including Ivy).

#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :commands prescient-persist-mode
    :init (prescient-persist-mode 1)
    :config
    (setq prescient-filter-method '(literal)
          prescient-sort-full-matches-first nil))

  (use-package ivy-prescient
    :after (counsel counsel-projectile prescient)
    :config
    (ivy-prescient-mode t)
    (setq ivy-prescient-sort-commands t))

#+END_SRC

A few keybindings to command it all.

#+BEGIN_SRC emacs-lisp
  (aa/leader-key-def
  "b" '(:ignore t :which-key "buffer")
  "bb" '(counsel-projectile-switch-to-buffer :which-key "list in project")
  "bc" '(kill-this-buffer :which-key "kill current")
  "bd" '(aa/close-and-kill-this-pane :which-key "close current"))

  (general-define-key
   :states 'normal
   "/" 'swiper)
#+END_SRC
* VCS

The primary git interface I use, and also one of the main reasons I use emacs. `libgit` provides native bindings which makes magit faster.
#+BEGIN_SRC emacs-lisp
  (use-package libgit)

  (use-package magit
    :defer t)

  (use-package magit-libgit
    :after (magit libgit))

  (aa/leader-key-def
    "g" '(:ignore t :which-key "git")
    "gs" '(magit-status :which-key "status")
    "gb" '(magit-blame :which-key "blame"))
#+END_SRC

Set ediff to use the current frame instead of creating a new one.
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

* Project Management

Projectile plays pretty well with the other packages, including magit and dired sidebar.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after evil
    :diminish
    :init
    (setq projectile-completion-system 'ivy)
    :config
    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
    (projectile-mode +1))

  (use-package counsel-projectile
    :after projectile
    :config
    (setq counsel-projectile-sort-files t
          counsel-projectile-sort-projects t
          counsel-projectile-sort-buffers t
          counsel-projectile-sort-directories t))

  (aa/leader-key-def
    "p"  '(projectile-command-map :which-key "projectile")
    "pf" '(counsel-projectile-find-file :which-key "find file"))
#+END_SRC

Perspective allows creation of multiple, independent buffer lists and switch between them.
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :config
    (unless (equal persp-mode t)
      (persp-mode)))

  (general-define-key
   :states 'normal
   "C-b" 'persp-counsel-switch-buffer)

  (aa/leader-key-def
    "bs" '(persp-switch :which-key "switch perspective")
    "bk" '(persp-kill :which-key "kill perspective")
    "bn" '(persp-next :which-key "next perspective"))
#+END_SRC

* Programming Languages
*** Common Config
#+begin_src emacs-lisp
  (use-package editorconfig
    :diminish
    :config
    (editorconfig-mode 1))
#+end_src

*** Ruby
#+begin_src emacs-lisp
  (use-package ruby-end
    :diminish)
#+end_src
*** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode)))
#+end_src
*** Elixir
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :after ruby-end
    :defer t
    :config
    (add-to-list 'elixir-mode-hook
                 (defun auto-activate-ruby-end-mode-for-elixir-mode ()
                   (set (make-variable-buffer-local 'ruby-end-expand-keywords-before-re)
                        "\\(?:^\\|\\s-+\\)\\(?:do\\)")
                   (set (make-variable-buffer-local 'ruby-end-check-statement-modifiers) nil)
                   (ruby-end-mode +1)))
    ;; Create a buffer-local hook to run elixir-format on save, only when we enable elixir-mode.
    (add-hook 'elixir-mode-hook
              (lambda () (add-hook 'before-save-hook 'elixir-format nil t))))
#+END_SRC
*** Kubernetes
#+BEGIN_SRC emacs-lisp
  (use-package kubel
    :defer t)
  (use-package kubel-evil
    :after kubel)

  (aa/leader-key-def
    "k" '(kubel :which-key "k8s"))
#+END_SRC
*** Web
#+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.p?html?\\'"
    :mode "\\.eex\\'"
    :mode "\\.leex\\'"

    :config
    (setq
     web-mode-markup-indent-offset 2
     web-mode-css-indent-offset 2
     web-mode-code-indent-offset 2
     web-mode-enable-auto-closing t
     web-mode-enable-auto-opening t
     web-mode-enable-auto-pairing t
     web-mode-enable-auto-indentation t)
    )

  (use-package polymode
    :mode ("\\.ex\\'" . poly-elixir-web-mode)
    :config
    (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
    (define-innermode poly-liveview-expr-elixir-innermode
      :mode 'web-mode
      :head-matcher (rx line-start (* space) "~L" (= 3 (char "\"'")) line-end)
      :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
      :head-mode 'host
      :tail-mode 'host
      :allow-nested nil
      :keep-in-mode 'host
      :fallback-mode 'host)
    (define-polymode poly-elixir-web-mode
      :hostmode 'poly-elixir-hostmode
      :innermodes '(poly-liveview-expr-elixir-innermode))
    )

  (setq web-mode-engines-alist '(("elixir" . "\\.ex\\'")))
#+end_src

*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

*** Markdown

Enable visual line for word wrap and sane navigation.
#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook #'visual-line-mode)
#+END_SRC

* Snippet Support
Add snippet support. Actual snippets live outside of this file. Custom snippets can be saved in ~~/.emacs.d/snippets~ directory.
#+begin_src emacs-lisp
  (use-package yasnippet
    :after company
    :diminish yas-minor-mode
    :hook (prog-mode . yas-minor-mode)
    :hook (org-mode . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :after (yasnippet))
#+end_src

* Terminal
Add ~vterm~, the most complete terminal emulator for emacs, and supporting packages.

#+BEGIN_SRC emacs-lisp
  (use-package vterm)

  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-hide-method 'reset-window-configration))

  (general-define-key
   :states 'normal
   "C-t" 'vterm-toggle)

  (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd "C-t") 'vterm-toggle)
#+END_SRC

* Code completion and Error Checking

Using company for auto-completion backend. Most modern languages implement LSP (Language Server Protocol), allowing for rich auto-completion.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :init
    (setq company-idle-delay 0)
    (setq company-global-modes '(not org-mode))
    (setq company-minimum-prefix-length 1)
    :config
    (global-company-mode 1))

  (use-package eglot
    :after elixir-mode
    :config
    (add-hook 'elixir-mode-hook 'eglot-ensure)
    (add-hook 'ruby-mode-hook 'eglot-ensure)
    (add-to-list 'eglot-server-programs '(elixir-mode "/Users/akash/Downloads/elixir-ls/language_server.sh")))

  ;; Helps with monorepo project where projects might not be the top level
  (add-hook 'project-find-functions 'aa/find-mix-project nil nil)
  (add-hook 'project-find-functions 'aa/find-rails-project nil nil)

  (use-package flycheck
    :diminish
    :custom
    (flycheck-emacs-lisp-initialize-packages t)
    (flycheck-display-errors-delay 0.1)
    :config
    (global-flycheck-mode)
    (flycheck-set-indication-mode 'left-margin)

    (add-to-list 'flycheck-checkers 'proselint))

  (use-package flycheck-inline
    :config (global-flycheck-inline-mode))
#+END_SRC

* Sidebar
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    :after evil
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))

    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
    (setq dired-sidebar-theme 'icons)
    (setq dired-sidebar-subtree-line-prefix "-")
    (setq dired-sidebar-use-term-integration t)
    (setq dired-sidebar-use-custom-font t))

  (aa/leader-key-def
    "n" '(dired-sidebar-toggle-sidebar :which-key "sidebar"))
#+END_SRC

Run `M-x all-the-icons-install-fonts` to install the icons.
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :after all-the-icons
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    (setq all-the-icons-dired-monochrome nil))
#+END_SRC

* General Searching
#+BEGIN_SRC emacs-lisp
  (use-package ripgrep)

  (use-package deadgrep)

  (aa/leader-key-def
    "s" '(deadgrep :which-key "search"))
#+END_SRC

* Custom Functions

Copy current file path relative to project root.
#+BEGIN_SRC emacs-lisp
  (defun aa/copy-file-path ()
    (interactive)
    (kill-new (file-relative-name buffer-file-name (projectile-project-root))))

  (defalias 'copy-file-path 'aa/copy-file-path)
#+END_SRC

Kill this buffer and window, as long as it's not the only window open.
#+begin_src emacs-lisp
  (defun aa/close-and-kill-this-pane ()
    "If there are multiple windows, then close this one and kill its buffer"
    (interactive)
    (kill-this-buffer)
    (if (not (one-window-p))
        (delete-window)))
#+end_src

Add custom methods to correctly locate elixir and rails projects inside a multi-project monorepo.
#+BEGIN_SRC emacs-lisp
  (defun aa/find-mix-project (dir)
    "Try to locate a Elixir project root by 'mix.exs' above DIR."
    (let ((mix_root (locate-dominating-file dir "mix.exs")))
      (message "Found Elixir project root in '%s' starting from '%s'" mix_root dir)
      (if (stringp mix_root) `(transient . ,mix_root) nil)))

  (defun aa/find-rails-project (dir)
    "Try to locate a Rails project root by 'Gemfile' above DIR."
    (let ((rails_root (locate-dominating-file dir "Gemfile")))
      (message "Found Rails project root in '%s' starting from '%s'" rails_root dir)
      (if (stringp rails_root) `(transient . ,rails_root) nil)))
#+END_SRC

* Sources
Huge thanks to these amazing people whose configs I borrowed from:
- [[https://github.com/meatcar/emacs.d/blob/master/config.org][Denys Pavlov]]
- [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][David Wilson]]
